/* EX 05 */

CREATE PROCEDURE FILME_HAS_NOT_LOCATION
AS
  SELECT
    F.ID,
    F.DESCRICAO AS FILME,
    F.DURACAO AS 'DURAÇÃO',
    F.VALOR
  FROM
    FILME F
  WHERE
    F.ID NOT IN 
    (
      SELECT
        FM.ID
      FROM 
        FILME FM
      INNER JOIN FITA FT
        ON FM.ID = FT.filmeId
      INNER JOIN LOCACAO L
        ON FT.ID = L.fitaId    
    )

/* EX 06 */

CREATE PROCEDURE COSTUMER_HAS_NOT_LOCATION
AS
  SELECT
    C.ID,
    C.NOME AS CLIENTE,
    C.CPF
  FROM 
    CLIENTE C
  LEFT JOIN LOCACAO L
    ON C.ID = L.clienteId
  WHERE
    L.clienteId IS NULL

/* EX 08 */

CREATE PROCEDURE LOCATION_VALUE_MONTH_TO_MONTH
    (@ANO INT)
AS
SELECT DISTINCT
  MONTH(L.dataLocacao) AS MES,
    (
    SELECT
      SUM(FL.VALOR)
    FROM
      FILME FL
    INNER JOIN FITA FT
      ON FL.ID = FT.filmeId
    INNER JOIN LOCACAO LO
      ON FT.ID = LO.fitaId
    WHERE
      YEAR(LO.dataLocacao) = @ANO AND MONTH(LO.dataLocacao) <= MONTH(L.dataLocacao)
    ) AS 'VALOR DO MÊS',
    (
    SELECT
      SUM(FM.VALOR)
    FROM 
      FILME FM
    INNER JOIN FITA FI
      ON FM.ID = FI.filmeId
    INNER JOIN LOCACAO LC
      ON FI.ID = LC.fitaId
    WHERE
      YEAR(LC.dataLocacao) = @ANO
    ) AS 'VALOR TOTAL LOCAÇÕES'
FROM
  LOCACAO L

/* EX 09 CORRIGIR OS 0*/

SELECT
  P_TAB.[1] AS 'AÇÃO',
  P_TAB.[2] AS 'TERROR',
  P_TAB.[3] AS 'COMÉDIA',
  P_TAB.[4] AS 'DRAMA',
  P_TAB.[5] AS 'FICÇÃO CIENTÍFICA'
FROM
(
  SELECT
    C.ID AS ID,
    C.DESCRICAO AS CATEGORIA
  FROM
    CATEGORIA C
  INNER JOIN FILME F
    ON C.ID = F.categoriaId
  INNER JOIN FITA FT
    ON F.ID = FT.filmeId
  INNER JOIN LOCACAO L
    ON FT.ID = L.fitaId
) AS TAB
PIVOT
(
  COUNT(ID) FOR ID IN ([1] , [2] , [3] , [4] , [5])
) AS P_TAB

/* EX 10 */

SELECT
  F.ID,
  F.DESCRICAO AS FILME,
  COUNT(L.fitaId) AS QTD,
  RANK() OVER (ORDER BY COUNT(L.fitaId) DESC) AS RANK
FROM
  FILME F
INNER JOIN FITA FT
  ON F.ID = FT.filmeId
INNER JOIN LOCACAO L
  ON FT.ID = L.fitaId
GROUP BY
  F.ID,
  F.DESCRICAO


/* FUNCTION */


/* EX 01 */

CREATE FUNCTION IS_PAR_OR_IMPAR
  (@NUM1 INT)
RETURNS VARCHAR(30)
  BEGIN
    DECLARE @VALUE VARCHAR(30)
    SET @VALUE = 'IMPAR'

    IF @NUM1 % 2 = 0 
      SET @VALUE = 'PAR'

    RETURN @VALUE
  END

/* EX 02 */

CREATE FUNCTION MONTH_NAME
  (@DATA DATE)
RETURNS VARCHAR(30)
  BEGIN
    DECLARE @VALUE VARCHAR(30)

    SET @VALUE = CONCAT(CAST(MONTH(@DATE) AS VARCHAR), ' - ', DATENAME(MONTH, @DATA))

    RETURN @VALUE
  END

/* EX 03 */


CREATE FUNCTION WEEKDAY_NAME
  (@DATA DATE)
RETURNS VARCHAR(30)
  BEGIN
    DECLARE @VALUE VARCHAR(30)

    SET @VALUE = CONCAT(CAST(DAY(@DATE) AS VARCHAR), ' - ', DATENAME(WEEKDAY, @DATA))

    RETURN @VALUE
  END

/* EX 04 */

CREATE FUNCTION CUSTOMER_GENTILIC
  (@SIGLA CHAR(2))
RETURNS VARCHAR(30)
  BEGIN
    DECLARE @VALUE VARCHAR(30)

    CASE
      WHEN @SIGLA = 'AC' THEN SET @VALUE = 'ACRIANO'
      WHEN @SIGLA = 'AL' THEN SET @VALUE = 'ALAGOANO'
      WHEN @SIGLA = 'AP' THEN SET @VALUE = 'AMAPAENSE'
      WHEN @SIGLA = 'AM' THEN SET @VALUE = 'BARÉ'
      WHEN @SIGLA = 'BA' THEN SET @VALUE = 'BAIANO'
      WHEN @SIGLA = 'CE' THEN SET @VALUE = 'CEARENSE'
      WHEN @SIGLA = 'DF' THEN SET @VALUE = 'DISTRITAL'
      WHEN @SIGLA = 'ES' THEN SET @VALUE = 'CAPIXABA'
      WHEN @SIGLA = 'GO' THEN SET @VALUE = 'GOIANO'
      WHEN @SIGLA = 'MA' THEN SET @VALUE = 'MARANHENSE'
      WHEN @SIGLA = 'MT' THEN SET @VALUE = 'MATO-GROSSENSE'
      WHEN @SIGLA = 'MG' THEN SET @VALUE = 'MINEIRO'
      WHEN @SIGLA = 'PR' THEN SET @VALUE = 'PARANAENSE'
      WHEN @SIGLA = 'PB' THEN SET @VALUE = 'PARAIBANO'
      WHEN @SIGLA = 'RS' THEN SET @VALUE = 'GAÚCHO'
      WHEN @SIGLA = 'SC' THEN SET @VALUE = 'CATARINENSE'
      WHEN @SIGLA = 'SP' THEN SET @VALUE = 'PAULISTA'
      WHEN @SIGLA = 'RJ' THEN SET @VALUE = 'FLUMINENSE'
    END

    RETURN @VALUE
  END

/* EX 05 */

CREATE FUNCTION CPF_MASK
  (@CPF VARCHAR(30))
RETURNS VARCHAR(30)
  BEGIN
    DECLARE @VALUE VARCHAR(30)

    SET @VALUE = CONCAT(SUBSTRING(@CPF , 1 , 3), '.', SUBSTRING(@CPF , 4 , 3), '.', SUBSTRING(@CPF , 7 , 3), '-', SUBSTRING(@CPF , 10 , 2))
  END

/* EX 06 */

CREATE FUNCTION VALUES_COMPARATION
  (@VALUE1 INT , @VALUE2 INT)
RETURNS VARCHAR(30)
  BEGIN
    DECLARE @VALUE VARCHAR(30)

    CASE
      WHEN @VALUE1 = @VALUE2 THEN SET @VALUE = 'X É IGUAL A Y'
      WHEN @VALUE1 > @VALUE2 THEN SET @VALUE = 'X É MAIOR QUE Y'
      WHEN @VALUE1 < @VALUE2 THEN SET @VALUE = 'X É MENOR QUE Y'
    END

    RETURN @VALUE
  END

/* EX 07 */

CREATE FUNCTION BHASKARA
  (@A INT , @B INT , @C , INT)
RETURNS VARCHAR(50)
  BEGIN
    DECLARE @VALUE VARCHAR(30), @X1 DECIMAL(10,2), @X2 DECIMAL(10,2), @DELTA INT

    SET @DELTA = (@B * @B) - (4 * @A * @C)

    IF @DELTA > 0
      SET @X1 = (-@B + @DELTA) / (2 * @A)
      SET @X2 = (-@B - @DELTA) / (2 * @A)

      SET @VALUE = CONCAT('X1 = ' , @X1 , '; X2 = ' , @X2)

    ELSE
      SET @VALUE = 'NÃO EXISTE RAIZ QUADRADA DE NUMERO NEGATIVO OU IGUAL A 0'

    RETURN @VALUE
  END

/* EX 08 */

CREATE FUNCTION HOW_OLD_R_U
  (@DATA DATE)
RETURNS INT
  BEGIN
    DECLARE @IDADE INT = FLOOR(DATEDIFF(DAY, @DATA, GETDATE()) / 365.25)

    RETURN @IDADE
  END

/* EX 09 */

CREATE FUNCTION BEST_COSTUMER
  (@ANO INT , @MES INT)
RETURNS VARCHAR(150)
  BEGIN
    DECLARE @COD INT, @NOME VARCHAR(50), @TOTAL INT, @VALUE VARCHAR(100)

    SET @TOTAL = 
    (
      SELECT
        MAX(TAB.QTD)
      FROM
      (
        SELECT
          COUNT(L.fitaId) AS QTD
        FROM
          CLIENTE C
        INNER JOIN LOCACAO L
          ON C.ID = L.clienteId
        WHERE
          YEAR(L.dataLocacao) = @ANO AND MONTH(L.dataLocacao) = @MES
        GROUP BY
          C.ID,
          C.NOME,
      ) AS TAB
    )

    SET @COD = 
    (
      SELECT
        C.ID
      FROM
        CLIENTE C
      INNER JOIN LOCACAO L
        ON C.ID = L.clienteId
      WHERE
          YEAR(L.dataLocacao) = @ANO AND MONTH(L.dataLocacao) = @MES
      GROUP BY
        C.ID
      HAVING
        COUNT(L.fitaId) = @TOTAL
    )

    SET @NOME = 
    (
      SELECT
        C.NOME
      FROM
        CLIENTE C
      WHERE
        C.ID = @COD
    )

    SET @VALUE = CONCAT('O cliente ' , CAST(@COD AS VARCHAR) , ' - ' , @NOME , ' foi o cliente que fez a maior quantidade de locações no ano ' , CAST(@ANO AS VARCHAR) , ' mês ' , CAST(@MES AS VARCHAR) , ' com um total de ' , CAST(@TOTAL AS VARCHAR) , ' locações.')
    
    RETURN @VALUE
  END      

/* EX 10 */

CREATE FUNCTION CPF_VALIDATION
  (@CPF VARCHAR(11))
RETURNS VARCHAR(30)
BEGIN
  DECLARE @INDEX INT = 1
  DECLARE @DIG01 INT = 0
  DECLARE @DIG02 INT = 0
  DECLARE @VALUE VARCHAR(60) = 'O CPF digitado é inválido'

  WHILE @INDEX <= 9
  BEGIN
    SET @DIG01 += CAST(SUBSTRING(@CPF , @INDEX , 1) AS INT) * (11 - @INDEX)
    SET @INDEX += 1
  END

  SET @INDEX = 1
  WHILE @INDEX <= 10
  BEGIN
    SET @DIG02 += CAST(SUBSTRING(@CPF , @INDEX , 1) AS INT) * (12 - @INDEX)
    SET @INDEX += 1
  END

  SET @DIG01 = (@DIG01 * 10) % 11
  SET @DIG02 = (@DIG02 * 10) % 11

  DECLARE @DIG_CPF CHAR(2) = CONCAT(CAST(@DIG01 AS VARCHAR), CAST(@DIG02 AS VARCHAR))

  IF @DIG_CPF = SUBSTRING(@CPF , 10 , 2)
    SET @VALUE = 
    (
      SELECT
        dbo.CPF_MASK(@CPF)
    )

  RETURN @VALUE
END
  
